package info.esblurock.background.services.transaction;

import java.io.IOException;

import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import info.esblurock.background.services.SystemObjectInformation;
import info.esblurock.background.services.firestore.WriteFirestoreCatalogObject;
import info.esblurock.background.services.service.MessageConstructor;
import info.esblurock.background.services.service.rdfs.GenerateAndWriteRDFForObject;
import info.esblurock.background.services.servicecollection.DatabaseServicesBase;
import info.esblurock.reaction.core.ontology.base.constants.ClassLabelConstants;
import info.esblurock.reaction.core.ontology.base.utilities.JsonObjectUtilities;

public enum TransactionProcess {
	
	
	CreateDatabasePersonEvent {

		@Override
		public JsonObject process(String transactionID, String owner, JsonArray prerequisites, JsonObject info) {
			JsonObject obj = new JsonObject();
			Document document = MessageConstructor.startDocument("CreateDatabasePersonEvent");
			Element body = MessageConstructor.isolateBody(document);
			obj.add(ClassLabelConstants.ActivityCatalogDatabasePersonCreation, info);
			obj.addProperty(ClassLabelConstants.CatalogObjectOwner, owner);
			obj.addProperty(ClassLabelConstants.TransactionID, transactionID);
			obj.addProperty(DatabaseServicesBase.service, "SubstituteAndWriteDatabasePerson");
			JsonObject response = DatabaseServicesBase.process(obj);
			if(response.get(ClassLabelConstants.ServiceProcessSuccessful).getAsBoolean()) {
				JsonObject catalog = response.get(ClassLabelConstants.SimpleCatalogObject).getAsJsonObject();
				String catalogmessage = response.get(ClassLabelConstants.ServiceResponseMessage).getAsString();
				MessageConstructor.combineBodyIntoDocument(document, catalogmessage);
				body.addElement("h3","GenerateAndWriteRDFForObject");
				response = GenerateAndWriteRDFForObject.generate(catalog);
				if(response.get(ClassLabelConstants.ServiceProcessSuccessful).getAsBoolean()) {
					String rdfmessage = response.get(ClassLabelConstants.ServiceResponseMessage).getAsString();
					MessageConstructor.combineBodyIntoDocument(document, rdfmessage);
					String message = MessageConstructor.DocumentToString(document);
					response.addProperty(ClassLabelConstants.ServiceResponseMessage, message);
					response.add(ClassLabelConstants.SimpleCatalogObject, catalog);
				}
			}
			return response;
		};
		
	}, CreateUserAccountEvent {

		@Override
		JsonObject process(String transactionID, String owner, JsonArray prerequisites, JsonObject info) {
			JsonObject requirementid = info.get(0).getAsJsonObject();
			JsonObject response = 
			return null;
		}
		
	}
	;
	
	/**
	 * @param transactionID The transaction ID (unique code for set of transactions)
	 * @param owner the owner of all the objects generated by the transaction
	 * @param prerequisites The set of IDs for the prerequisites of the transaction
	 * @param info The auxiliary information associated with the transaction
	 * @return the transaction event
	 */
	abstract JsonObject process(String transactionID, String owner, JsonArray prerequisites, JsonObject info);
	public static JsonObject processFromTransaction(String transaction, JsonArray prerequisites, JsonObject info) {
		Document document = MessageConstructor.startDocument("Transaction: " + transaction);
		String transname = transaction.substring(8);
		TransactionProcess process = TransactionProcess.valueOf(transname);
		String transactionID = SystemObjectInformation.determineTransactionID();
		String owner = SystemObjectInformation.determineOwner();
		JsonObject response = process.process(transactionID, owner, prerequisites, info);
		if(response.get(ClassLabelConstants.ServiceProcessSuccessful).getAsBoolean()) {
			JsonObject event = GenerateTransactionEventObject.generate(info, transactionID);
			String title = info.get(ClassLabelConstants.DescriptionTitle).getAsString();
			JsonObject shortdescr = event.get(ClassLabelConstants.ShortTransactionDescription).getAsJsonObject();
			shortdescr.addProperty(ClassLabelConstants.TransactionEventType, transaction);
			shortdescr.addProperty(ClassLabelConstants.DescriptionTitleTransaction, title);
			JsonObject output = response.get(ClassLabelConstants.SimpleCatalogObject).getAsJsonObject();
			GenerateTransactionEventObject.addDatabaseObjectIDOutputTransaction(event,output);
			WriteFirestoreCatalogObject.writeCatalogObject(event);
			String message = response.get(ClassLabelConstants.ServiceResponseMessage).getAsString();
			MessageConstructor.combineBodyIntoDocument(document, message);
			JsonObject rdfresponse = GenerateAndWriteRDFForObject.generate(event);
			if(rdfresponse.get(ClassLabelConstants.ServiceProcessSuccessful).getAsBoolean()) {
				String rdfmessage = rdfresponse.get(ClassLabelConstants.ServiceResponseMessage).getAsString();
				MessageConstructor.combineBodyIntoDocument(document, rdfmessage);
				response = DatabaseServicesBase.standardServiceResponse(document, "Success: " + transaction, event);	
			} else {
				response = DatabaseServicesBase.standardErrorResponse(document, rdfresponse, event);
			}
		}
		return response;
	}
	
	
	/**
	 * @param json The TransactionEventInputObject object from the post
	 * @return the  transaction event
	 * 
	 * The object should have 
	 * <ul>
	 * <li> Transaction (dataset:transaction) String
	 * <li> Prerequisite IDs (dataset:requiredtransitionid) JsonArray
	 * <li> ActivityInfo (dataset:activityinfo) JsonObject
	 * <ul> 
	 */
	public static JsonObject processFromTransaction(JsonObject json) {
		String transaction = json.get(ClassLabelConstants.TransactionEventType).getAsString();
		JsonArray prerequisites = json.get(ClassLabelConstants.RequiredTransactionIDAndType).getAsJsonArray();
		JsonObject info = json.get(ClassLabelConstants.ActivityInformationRecord).getAsJsonObject();
		return processFromTransaction(transaction,prerequisites,info);
	}
}
