package info.esblurock.background.services.transaction;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import info.esblurock.background.services.SystemObjectInformation;
import info.esblurock.background.services.service.rdfs.GenerateAndWriteRDFForObject;
import info.esblurock.reaction.core.ontology.base.constants.ClassLabelConstants;
import info.esblurock.reaction.core.ontology.base.dataset.BaseCatalogData;

public class GenerateTransactionEventObject {
	/**
	 * @param info The ActivityInformationRecord
	 * @param descr The basic description of this transaction
	 * @param owner The owner of the transaction
	 * @param transactionID The transactionID
	 * @param publicS true if public, otherwise owned by the owner
	 * @return The TransactionEventObject
	 * 
	 * The owner is the current user.
	 * The default access is the user.
	 * 
	 */
	public static JsonObject generate(JsonObject info, String transactionID) {
		String owner = SystemObjectInformation.determineOwner();
		String publicS = owner;
		JsonObject json = BaseCatalogData.createStandardDatabaseObject("dataset:TransactionEventObject", 
				owner, transactionID, publicS);
		json.add(ClassLabelConstants.ActivityInformationRecord, info);
		JsonArray arr = new JsonArray();
		json.add(ClassLabelConstants.DatabaseObjectIDOutputTransaction, arr);
		return json;
	}
	/**
	 * @param transaction The transaction event
	 * @param catalog a catalog object generated by the transaction
	 * 
	 * This extracts the FirestoreID from the catalog and adds it to the transaction DatabaseObjectIDOutputTransaction
	 * 
	 */
	public static void addDatabaseObjectIDOutputTransaction(JsonObject transaction, JsonObject catalog) {
		JsonArray arr = transaction.get(ClassLabelConstants.DatabaseObjectIDOutputTransaction).getAsJsonArray();
		JsonObject firestoreid = catalog.get(ClassLabelConstants.FirestoreCatalogID).getAsJsonObject();
		arr.add(firestoreid);
	}
	
	public static void generateRDFsForTransaction(JsonObject transaction) {
		JsonObject response = GenerateAndWriteRDFForObject.generate(transaction);

	}

}
