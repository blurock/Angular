package info.esblurock.background.services.transaction;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import info.esblurock.background.services.SystemObjectInformation;
import info.esblurock.background.services.service.rdfs.GenerateAndWriteRDFForObject;
import info.esblurock.reaction.core.ontology.base.constants.ClassLabelConstants;
import info.esblurock.reaction.core.ontology.base.dataset.BaseCatalogData;

public enum GenerateTransactionEventObject {

	DatasetCollectionManagementTransaction {

		@Override
		public void generate(JsonObject transaction, JsonObject info, JsonObject prerequisites) {
		}

	},
	DatasetTransactionEventObject {

		@Override
		public void generate(JsonObject transaction, JsonObject info, JsonObject prerequisites) {
		}

	},
	UserManagementTransactionObject {

		@Override
		public void generate(JsonObject transaction, JsonObject info, JsonObject prerequisites) {
		}

	};

	public abstract void generate(JsonObject transaction, JsonObject info, JsonObject prerequisites);

	/**
	 * @param info          The ActivityInformationRecord
	 * @param descr         The basic description of this transaction
	 * @param owner         The owner of the transaction
	 * @param transactionID The transactionID
	 * @param publicS       true if public, otherwise owned by the owner
	 * @return The TransactionEventObject
	 * 
	 *         The owner is the current user. The default access is the user.
	 * 
	 * 
	 *         public static JsonObject generate(JsonObject info, JsonObject
	 *         prerequisites, String transactiontype, String transactionID) { String
	 *         owner = SystemObjectInformation.determineOwner(); String publicS =
	 *         owner; String keyword = transactiontype.substring(8); JsonObject json
	 *         = BaseCatalogData.createStandardDatabaseObject(transactiontype,
	 *         owner, transactionID, publicS); GenerateTransactionEventObject
	 *         generate = GenerateTransactionEventObject.valueOf(keyword);
	 * 
	 *         generate.generate(catalog, owner, transactionID, publicS);
	 *         json.add(ClassLabelConstants.ActivityInformationRecord, info);
	 *         JsonArray arr = new JsonArray();
	 *         json.add(ClassLabelConstants.DatabaseObjectIDOutputTransaction, arr);
	 *         return json; }
	 */
	/**
	 * @param transaction The transaction event
	 * @param catalog     a catalog object generated by the transaction
	 * 
	 *                    This extracts the FirestoreID from the catalog and adds it
	 *                    to the transaction DatabaseObjectIDOutputTransaction
	 * 
	 */
	public static void addDatabaseObjectIDOutputTransaction(JsonObject transaction, JsonArray catalogarr) {
		JsonArray arr = transaction.get(ClassLabelConstants.DatabaseObjectIDOutputTransaction).getAsJsonArray();
		for (int i = 0; i < catalogarr.size(); i++) {
			JsonObject catalog = catalogarr.get(i).getAsJsonObject();
			JsonObject firestoreid = catalog.get(ClassLabelConstants.FirestoreCatalogID).getAsJsonObject();
			arr.add(firestoreid);
		}

	}

	public static void generateRDFsForTransaction(JsonObject transaction) {
		JsonObject response = GenerateAndWriteRDFForObject.generate(transaction);

	}

}
